% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_instances.R
\name{run_instances}
\alias{run_instances}
\title{Run an EC2 Instance}
\usage{
run_instances(
  image,
  type,
  min = 1,
  max = min,
  keypair = NULL,
  subnet = NULL,
  sgroup = NULL,
  userdata = NULL,
  shutdown = c("stop", "terminate"),
  token = NULL,
  tags = NULL,
  spot_options = NULL,
  query_extra = list(),
  launch_template = NULL,
  ...
)
}
\arguments{
\item{image}{A character string containing an Amazon Machine Image (AMI) image ID or an object of class \dQuote{ec2_image}.}

\item{type}{A character string specifying the type of EC2 instance to use. See <http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html> for details of types and available options.}

\item{min}{An integer specifying a minimum number of instances to launch. Defaults to 1.}

\item{max}{An integer specifying a minimum number of instances to launch. Defaults to `min`.}

\item{keypair}{A character string (max 255 character) containing the name of a keypair, or an object of class \dQuote{ec2_keypair}.}

\item{subnet}{A character string containing the name of a subnet, or an object of class \dQuote{ec2_subnet}.}

\item{sgroup}{A character vector specifying one or more Security Group IDs, or (a list of) objects of class \dQuote{ec2_security_group}.}

\item{userdata}{Optionally, a character string specifying a script to run during launch. See <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html>.}

\item{shutdown}{A character string specifying either \dQuote{stop} or \dQuote{terminate}, to control the behavior of a shutdown action taken from within the instance.}

\item{token}{A (max 64-character) string containing a unique user-defined token. This can be used to ensure idempotency of requests in the event of a user-side failure. See \url{http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html} for details.}

\item{tags}{A named list of tags.}

\item{spot_options}{Optionally, an empty `list()` to request a spot instance with API defaults, or list of spot-market options. See <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotMarketOptions.html> for available options}

\item{query_extra}{Optionally, additional query parameters to be passed to the RunInstances API. See <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html> for available parameters.}

\item{launch_template}{A character string specifying a Launch Template ID.}

\item{...}{Additional arguments passed to [ec2HTTP()].}
}
\value{
A list
}
\description{
Run/launch a new EC2 Instance
}
\examples{
\dontrun{
# Rstudio instance for interactive use
## RStudio AMIs from: http://www.louisaslett.com/RStudio_AMI/
s <- describe_subnets()
g <- create_sgroup("my_security_group", "a security group", vpc = s[[1]])
i <- run_instances(image = "ami-7f9dc615",
                   type = "t2.micro",
                   subnet = s[[1]],
                   sgroup = g[[1]])

stop_instances(i[[1]])
terminate_instances(i[[1]])


# Generic linux image
## create an SSH keypair
my_keypair <- create_keypair("r-ec2-example")
pem_file <- tempfile(fileext = ".pem")
cat(my_keypair$keyMaterial, file = pem_file)

## script to install R, RStudio, and awspack
sh <- system.file("rstudio.sh", package = "aws.ec2")

## run instance
i <- run_instances(image = "ami-97785bed",
                   type = "t2.micro",
                   userdata = readBin(sh)
                   keypair = my_keypair)
)
try(authorize_ingress(my_sg))
instance_ip <- associate_ip(i, allocate_ip("vpc"))$publicIp

# log in to instance
library("ssh")
session <- ssh::ssh_connect(paste0("ec2user@", instance_ip),
                            keyfile = pem_file, passwd = "ec2password")

# write a quick little R script to execute
cat("'hello world!'\n", file = "helloworld.R")
# upload it to instance
invisible(ssh::scp_upload(session, "helloworld.R"))

# execute script on instance
x <- ssh::ssh_exec_wait(session, "Rscript helloworld.R")

## disconnect from instance
ssh_disconnect(session)

# kill instance
stop_instances(i[[1]])
terminate_instances(i[[1]])
}
}
\references{
<http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html>
<http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html>
}
\seealso{
[describe_instances()], [start_instances()], [terminate_instances()]
}
\keyword{instances}
